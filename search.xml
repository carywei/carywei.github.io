<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>阿里云Docker简单实战</title>
      <link href="/2020/02/23/2020/0223/aliyun-docker/"/>
      <url>/2020/02/23/2020/0223/aliyun-docker/</url>
      
        <content type="html"><![CDATA[<p>在阿里云买了个人服务，进行软件安装的时候，通过docker进行简单管理会比较清晰一下，可以开启和停止服务,我使用系统是<strong>Centos-7.5</strong></p><h1 id="Aliyun-安装-Docker指南"><a href="#Aliyun-安装-Docker指南" class="headerlink" title="Aliyun 安装 Docker指南"></a>Aliyun 安装 Docker指南</h1><p><a href="https://help.aliyun.com/document_detail/51853.html?spm=a2c4g.11186623.4.1.6b324c074Tvbxv" target="_blank" rel="noopener">搭建Docker</a></p><h2 id="部署Docker"><a href="#部署Docker" class="headerlink" title="部署Docker"></a>部署Docker</h2><ul><li>添加yum源</li></ul><pre><code>yum install epel-release –yyum clean allyum list</code></pre><ul><li>安装并运行Docker</li></ul><pre><code>yum install docker-io –ysystemctl start docker</code></pre><ul><li>检查安装结果</li></ul><pre><code>docker info</code></pre><h2 id="使用Docker"><a href="#使用Docker" class="headerlink" title="使用Docker"></a>使用Docker</h2><ul><li>管理Docker守护进程</li></ul><pre><code>systemctl start docker     #运行Docker守护进程systemctl stop docker      #停止Docker守护进程systemctl restart docker   #重启Docker守护进程</code></pre><ul><li>拉取镜像</li></ul><pre><code>docker pull registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</code></pre><ul><li>修改标签</li></ul><pre><code>docker tag registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5:latest aliweb:v1</code></pre><ul><li>查看所有镜像</li></ul><pre><code>docker images</code></pre><ul><li>删除镜像</li></ul><pre><code>docker rmi –f registry.cn-hangzhou.aliyuncs.com/lxepoo/apache-php5</code></pre><h2 id="管理容器"><a href="#管理容器" class="headerlink" title="管理容器"></a>管理容器</h2><ul><li>运行进入容器</li></ul><pre><code>docker run -it containerId /bin/bash</code></pre><ul><li>退出容器</li></ul><pre><code>exit</code></pre><ul><li>进入后台运行容器</li></ul><pre><code>docker exec -it contianerId /bin/bash</code></pre><ul><li>将容器做成镜像</li></ul><pre><code>docker commit containerID/containerName repository:tag</code></pre><ul><li>将运行容器做成镜像</li></ul><pre><code>docker commit contianerId imageName:imageTag</code></pre><ul><li>删除容器</li></ul><pre><code>docker rm -f containerID</code></pre><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><ul><li>准备Dockerfile内容。</li></ul><pre><code># vim Dockerfile FROM apachephp:v1  #声明基础镜像来源MAINTAINER DTSTACK #声明镜像拥有者#RUN后面接容器运行前需要执行的命令，由于Dockerfile文件不能超过127行，因此当命令较多时建议写到脚本中执行RUN mkdir /dtstact #开机启动命令，此处最后一个命令需要是可在前台持续执行的命令，否则容器后台运行时会因为命令执行完而退出。ENTRYPOINT ping www.aliyun.com </code></pre><ul><li>构建镜像。</li></ul><pre><code>docker build -t webcentos:v1 .   # . 是Dockerfile文件的路径，不能忽略docker images                    #查看是否创建成功docker run –d webcentos:v1       #后台运行容器docker ps                        #查看当前运行中的容器docker ps –a                     #查看所有容器，包括未运行中的docker logs CONTAINER ID/IMAGE   #如未查看到刚才运行的容器，则用容器id或者名字查看启动日志排错docker commit fb2844b6c070 dtstackweb:v1 #commit 后接容器id 和构建新镜像的名称和版本号。docker images                    #列出本地（已下载的和本地创建的）镜像docker push                      #将镜像推送至远程仓库，默认为 Docker Hub</code></pre><ul><li>将镜像推送到registry</li></ul><pre><code>docker login --username=dtstack_plus registry.cn-shanghai.aliyuncs.com #执行后输入镜像仓库密码docker tag [ImageId] registry.cn-shanghai.aliyuncs.com/dtstack123/test:[镜像版本号]docker push registry.cn-shanghai.aliyuncs.com/dtstack123/test:[镜像版本号]</code></pre><blockquote><p>其中<strong>ImageId</strong>和<strong>镜像版本号</strong>请您根据自己的镜像信息进行填写。</p></blockquote><p>在镜像仓库能查看到镜像版本信息则说明推送成功。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wordpress</title>
      <link href="/2020/02/23/2020/0223/wordpress/"/>
      <url>/2020/02/23/2020/0223/wordpress/</url>
      
        <content type="html"><![CDATA[<p>搭建 Wordpress 系统，我们通过Docker运行此博客系统，通过Docker-compose.yml进行安装。</p><h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><pre><code>mkdir wordpresscd wordpressvim docker-compose.yml</code></pre><h3 id="安装方法之一-compose"><a href="#安装方法之一-compose" class="headerlink" title="安装方法之一(compose)"></a>安装方法之一(compose)</h3><pre><code>curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><h3 id="安装方法之二-compose"><a href="#安装方法之二-compose" class="headerlink" title="安装方法之二(compose)"></a>安装方法之二(compose)</h3><h4 id="升级python3-0"><a href="#升级python3-0" class="headerlink" title="升级python3.0"></a>升级python3.0</h4><ul><li>依赖安装</li></ul><pre><code># yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel gcc</code></pre><ul><li>安装前查看当前系统下的python版本号</li></ul><pre><code># python -V</code></pre><ul><li>获取python3.x的官方软件包</li></ul><pre><code># wget https://www.python.org/ftp/python/3.6.5/Python-3.6.5.tgz</code></pre><ul><li>解压缩该软件包</li></ul><pre><code># tar -zxvf Python-3.6.5.tgz</code></pre><ul><li>开启python3.0的SSL</li></ul><pre><code># vim Modules/Setup.dist</code></pre><blockquote><pre><code># Socket module helper for socket(2)_socket socketmodule.c# Socket module helper for SSL support; you must comment out the other# socket line above, and possibly edit the SSL variable:SSL=/usr/local/ssl_ssl _ssl.c \-DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \-L$(SSL)/lib -lssl -lcrypto</code></pre></blockquote><ul><li>在解压目录下安装配置</li></ul><pre><code># cd Python-3.6.5# ./configure</code></pre><ul><li>编译并安装</li></ul><pre><code># make# make install</code></pre><ul><li>Python2 &amp;&amp; Python3共存</li></ul><pre><code># which python3# python3 -v# python2 -v# pip -v# pip3 -v</code></pre><h4 id="pip安装-compose"><a href="#pip安装-compose" class="headerlink" title="pip安装(compose)"></a>pip安装(compose)</h4><ul><li>安装python-pip</li></ul><pre><code>yum -y install epel-releaseyum -y install python-pip</code></pre><ul><li>安装docker-compose</li></ul><pre><code>pip3 install docker-compose</code></pre><ul><li>验证</li></ul><pre><code>docker-compose version</code></pre><h3 id="构建项目-compose"><a href="#构建项目-compose" class="headerlink" title="构建项目(compose)"></a>构建项目(compose)</h3><pre><code>version: &quot;3&quot;services:  db:    image: 10.30.12.55/docker/mysql:5.6    volumes:      - /var/lib/mysql:/var/lib/mysql    #自动重启    restart: always    environment:      #指定MySQL的root账号初始密码      MYSQL_ROOT_PASSWORD: 123456      #指定容器启动后要创建的数据库      MYSQL_DATABASE: wordpress      #指定容器在启动后要创建的普通用户账号，该账号有远程登录的权限      MYSQL_USER: tom      #为用户设置密码      MYSQL_PASSWORD: 123456  wordpress:    depends_on:      - db    image: 10.30.12.55/docker/wordpress    ports:      - &quot;8000:80&quot;    restart: always    environment:      #指定要使用的数据库名      WORDPRESS_DB_NAME: wordpress      #指定要MySQL容器的ip和端口      WORDPRESS_DB_HOST: db:3306      #指定登录MySQL的账号      WORDPRESS_DB_USER: tom      #指定登录MySQL的密码      WORDPRESS_DB_PASSWORD: 123456</code></pre><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><pre><code>docker-compose up -d</code></pre><blockquote><p>Compose 就会拉取镜像再创建我们所需要的镜像，然后启动<br>wordpress 和数据库容器。 接着浏览器访问 ip:8000 端口就能看到 WordPress 安装<br>界面了。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> blogs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wordpress </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片格式( SVG | WebP)</title>
      <link href="/2020/02/23/2020/0223/tu-pian-ge-shi/"/>
      <url>/2020/02/23/2020/0223/tu-pian-ge-shi/</url>
      
        <content type="html"><![CDATA[<p>SVG 和 WebP图片优缺点和适用范围，SVG适合做图标或者颜色变化不大的图片，WebP可以不降低质量的情况将资源降到比较低，适合做App瘦身。</p><h3 id="WebP简介"><a href="#WebP简介" class="headerlink" title="WebP简介"></a>WebP简介</h3><p><strong>WebP</strong>是谷歌提供的一种支持有损压缩和无损压缩的图片文件格式，而且可以提供比JPEG或PNG更好的压缩。</p><blockquote><p>在Android 4.0(API level 14)中支持有损的WebP图像</p><p>在Android 4.3(API level 18)和更高版本中支持无损和透明的WebP图像</p><p><strong>所以建议您的项目必须声明一个minSdkVersion 18或更高版本</strong></p></blockquote><h3 id="两者的优点"><a href="#两者的优点" class="headerlink" title="两者的优点"></a>两者的优点</h3><h4 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h4><ul><li>尺寸小, 压缩性强;</li><li>矢量图片;</li><li>XML编写;</li><li>图片内文字支持搜索, Web端适用;</li></ul><h4 id="WebP"><a href="#WebP" class="headerlink" title="WebP"></a>WebP</h4><ul><li>精细度不降低的前提下缩小图片体积;</li></ul><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><h4 id="SVG-1"><a href="#SVG-1" class="headerlink" title="SVG"></a>SVG</h4><ul><li>Web端: IE9开始兼容;</li><li>Android: 安卓3.X开始局部支持;</li><li>IOS: Safari简单支持, 复杂滤镜不可行;</li></ul><h4 id="WebP-1"><a href="#WebP-1" class="headerlink" title="WebP"></a>WebP</h4><ul><li>Web端: Chromium内核浏览器, 国内占比50%;</li><li>Android: 支持 ( Android4.0以上提供的原生支持, 4.0以下使用官方解析库) ;</li><li>IOS: 使用官方解析库;</li></ul><h3 id="图片大小"><a href="#图片大小" class="headerlink" title="图片大小"></a>图片大小</h3><h4 id="例子图片，转换后："><a href="#例子图片，转换后：" class="headerlink" title="例子图片，转换后："></a>例子图片，转换后：</h4><ul><li>转换为PNG后, 2.3M, 124K ;</li><li>转换为SVG后, 1.44M, 257K ; 有细微失真 ;</li><li>转换为WebP后, 91.5K, 16.3K ; 没有失真 ;</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过自己测试的两张图片, </p><ul><li><p>发现目前SVG更适合做图标, </p></li><li><p>色彩变化较为精细的图片转化为SVG格式后会变得更大，不太适合 ; </p></li><li><p>而WebP暂时没有发现什么弊端.</p></li></ul><blockquote><p>PS: 现在可以使用AndroidStudio直接转化webP, AS真乃亲爸</p></blockquote><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><ul><li><p><a href="https://isux.tencent.com/why-svg.html" target="_blank" rel="noopener">SVG</a></p></li><li><p><a href="https://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="noopener">WebP</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多媒体 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github项目批量抓取</title>
      <link href="/2020/02/22/2020/0222/github-xiang-mu-pi-liang-zhua-qu/"/>
      <url>/2020/02/22/2020/0222/github-xiang-mu-pi-liang-zhua-qu/</url>
      
        <content type="html"><![CDATA[<p>有时候我们同步Github的项目时候，每次单个项目pull很麻烦，最终发现可以通过python3的脚步完成多个项目同步完成。</p><h1 id="首先安装"><a href="#首先安装" class="headerlink" title="首先安装"></a>首先安装</h1><ul><li>安装批量工具<pre><code>pip install ghcloneall</code></pre><h1 id="其次编辑"><a href="#其次编辑" class="headerlink" title="其次编辑"></a>其次编辑</h1></li><li>ROI_Origanizations格式说明<pre><code>vim ROI_Organizations.md</code></pre><blockquote><p>[OrgName] [u|o]<br>u 代表 OrgName 为用户<br>o 代表 OrgName 为 Organization</p></blockquote></li></ul><h1 id="然后抓取"><a href="#然后抓取" class="headerlink" title="然后抓取"></a>然后抓取</h1><ul><li>脚步执行命令<pre><code>python3 GitCrawler.py</code></pre><blockquote><p>参考安装链接：<a href="https://github.com/carywei/GitCrawler" target="_blank" rel="noopener">https://github.com/carywei/GitCrawler</a></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年第一天班</title>
      <link href="/2020/02/03/2020/0203/2020-nian-di-yi-tian-ban/"/>
      <url>/2020/02/03/2020/0203/2020-nian-di-yi-tian-ban/</url>
      
        <content type="html"><![CDATA[<p>现在是晚上2020-02-30 06:26 我在内蒙古赤峰旺业甸服务区，由于下雪高速封路，我们在高速入口处等待高速封路解除，与工作人员沟通预计上午10点可以通行。</p><h2 id="现在所想"><a href="#现在所想" class="headerlink" title="现在所想"></a>现在所想</h2><h3 id="聊聊BYD秦续航"><a href="#聊聊BYD秦续航" class="headerlink" title="聊聊BYD秦续航"></a>聊聊BYD秦续航</h3><ul><li>标准里程表显示400公里</li><li>夏天实际行驶预计在360公里，因为剩下40公里需要找充电桩，呵呵。</li><li>冬天实际行驶预计在200公里，因为天气冷的原因，电池能耗比较低。</li></ul><h3 id="目的北京"><a href="#目的北京" class="headerlink" title="目的北京"></a>目的北京</h3><pre><code>* 途径矛荆坝服务区* 途径安子岭服务区* 途径太师屯服务区</code></pre><h3 id="抵达北京家中封闭"><a href="#抵达北京家中封闭" class="headerlink" title="抵达北京家中封闭"></a>抵达北京家中封闭</h3><pre><code>* 备了很多面条* 备了不少蘑菇酱* 备了一些萝卜</code></pre><h3 id="期望今年能够平稳度过"><a href="#期望今年能够平稳度过" class="headerlink" title="期望今年能够平稳度过"></a>期望今年能够平稳度过</h3><pre><code>* 工作顺利* 完成业绩* 突破自我* 自我卓越</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Hello World</title>
      <link href="/2019/12/24/2019/1224/hello-world/"/>
      <url>/2019/12/24/2019/1224/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
